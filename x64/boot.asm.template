BITS 64

%macro BaseAddr 0
	push $
	call getBaseAddr
%endmacro


%macro OFFSET 0
	push $
	call getOffsetAddr
%endmacro

	jmp ENTRY

ENTRY:

	push        rbp
	mov         rbp , rsp
	sub         rsp , 0x40

	BaseAddr
	mov         [rbp - 0x08] , rax ; get current program base address

	OFFSET
    mov         [rbp - 0x10] , rax ; get the program current offset on memory , offset address is entry point relative to base address offset

	mov         rsi , FILESIZE  ; file size
	mov         rdi , ELF       ; elf begin address , ELF flag generated by tool chains
	add         rdi , [rbp - 0x10]

    ; call C language
	call        Clang 

    ; recalculate the original entry point
	mov         rax , [rbp - 0x08]
	add         rax , ORIGIN_ENTER
	leave
	jmp         rax


; get the PE base address on runtime
; base address value store in eax
getBaseAddr:
	mov         rax , [rsp]
	sub         rax , [rsp + 0x08]
	sub         rax , NEW_ENTER+0x0A;new entry point +10
	ret         8


; Get memory offset
getOffsetAddr:
    mov         rax , [rsp]
    sub         rax , [rsp + 0x08]
    sub         rax , 0x0A
    ret         8
